<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yes,It's mE.]]></title>
  <link href="http://caoguangyao.github.com/atom.xml" rel="self"/>
  <link href="http://caoguangyao.github.com/"/>
  <updated>2012-11-16T13:23:00+08:00</updated>
  <id>http://caoguangyao.github.com/</id>
  <author>
    <name><![CDATA[Cao.Guangyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django connect to mssql]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/11/16/django-connect-to-mssql/"/>
    <updated>2012-11-16T12:53:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/11/16/django-connect-to-mssql</id>
    <content type="html"><![CDATA[<p>platform:</p>

<pre><code>Client:
ubuntu10.10
django1.2.7
django-pyodbc from trunk

Database Server
ms sql server 2005
winxp 32bit
</code></pre>

<p>install tools:</p>

<pre><code>sudo apt-get install unixodbc unixodbc-dev freetds-dev tdsodbc
</code></pre>

<p>then modify the config files</p>

<pre><code>sudo vim /etc/odbcinst.ini

[FreeTDS]
Description=TDS driver
Driver=/usr/lib/odbc/libtdsodbc.so
Setup=/usr/lib/odbc/libtdsS.so
CPTimeout=
CPReuse=
</code></pre>

<p>odbc.ini:</p>

<pre><code>sudo vim /etc/odbc.ini  

[mydsn]
Description= my dns
Driver=FreeTDS
Database=mydb
Servername=myServer
TDS_Version=8.0
Port=1433
</code></pre>

<p>freetds.conf:
append to the last.</p>

<pre><code>sudo vim /etc/freetds/freetds.conf

[myServer]
host = 192.168.3.128
port = 1433
tds version = 8.0
</code></pre>

<p>config finished</p>

<p>use tsql command to test connect:</p>

<pre><code>tsql -S server_ip_address -U username -P password
</code></pre>

<p>install pyodbc</p>

<pre><code>sudo easy_install pyodbc
</code></pre>

<p>if have error for gcc:</p>

<pre><code>sudo apt-get install python-dev build-essential
</code></pre>

<p>and try it angain.</p>

<p>write a python script to test:</p>

<pre><code>import pyodbc

conn = pyodbc.connect("DSN=mydsn;UID=username;PWD=password")

cur = conn.cursor()
cur.execute('select * from test_table')
for row in cur:
    print 8 ,row
</code></pre>

<p>if have error in conn,use following code test first.</p>

<pre><code>conn = pyodbc.connect("DRIVER={FreeTDS};Server=server_ip_address;UID=username;PWD=password;DATABASE=dbname")
</code></pre>

<p>if it don&#8217;t run nomarlly ,please check your config file:freetds.conf,odbc.ini,odbcinst.ini</p>

<p>then install django-odbc from trunk</p>

<pre><code>svn co http://django-pyodbc.googlecode.com/svn/trunk/
</code></pre>

<p>change the settings.py file like the document said.</p>

<p>then your can run syncdb and runserver.</p>

<h4>troubles</h4>

<p>I did use django1.1 and django-pyodbc1.0.x at first,pyodbc is work right,but can&#8217;t run the django syncdb and runserver.
it throws some error about settings.Time_Zone,and I still don&#8217;t know how to deal with it.</p>

<p>it seens have some problem use django-pyodbc from trunk too.it happens when syncdb for admin site:throws a None type can&#8217;t itera.</p>

<p>all settings are done,you can write a model to test it .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim tips]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/11/08/vim-tips/"/>
    <updated>2012-11-08T10:26:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/11/08/vim-tips</id>
    <content type="html"><![CDATA[<h3>ctags</h3>

<p>download from <a href="http://ctags.sourceforge.net">here</a> .
intall it:</p>

<pre><code>$ tar -xzvf ctags-5.6.tar.gz
$ cd ctags-5.6
$ make
$ sudo make install   
</code></pre>

<p>use it:
go to directory</p>

<pre><code>$ ctags -R
</code></pre>

<p>ctrl+] go to function definition.
ctrl+t go back.</p>

<h3>taglist</h3>

<p>download from <a href="http://www.vim.org/scripts/script.php?script_id=273">here</a>.</p>

<p>add these in .vimrc</p>

<pre><code>let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
</code></pre>

<p>use command with :Tlist in vim.</p>

<h3>winmanager</h3>

<p>download from <a href="http://www.vim.org/scripts/script.php?script_id=95">here</a>.</p>

<p>add these in .vimrc</p>

<pre><code>let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle&lt;cr&gt;
</code></pre>

<p>restart vim and type &#8216;wm&#8217; in normal state</p>

<h3>grep</h3>

<p>download form <a href="http://www.vim.org/scripts/script.php?script_id=311">here</a>.</p>

<p>add in .vimrc</p>

<pre><code>nnoremap &lt;silent&gt; &lt;F3&gt; :Grep&lt;CR&gt;
</code></pre>

<p>then you can use F3 to search your word.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to remote ssh server without password]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/19/how-to-remote-ssh-server-without-password/"/>
    <updated>2012-10-19T08:31:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/19/how-to-remote-ssh-server-without-password</id>
    <content type="html"><![CDATA[<p>1.create ras key by using ssh-keygen</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>this operation will generate two keys in your system.</p>

<p>2.copy it to your ssh server</p>

<pre><code>cat ~/.ssh/id_rsa.pub |ssh username@ssh_server_host 'cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>3.now you can remote to your server without password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django tinymce]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/18/django-tinymce/"/>
    <updated>2012-10-18T15:56:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/18/django-tinymce</id>
    <content type="html"><![CDATA[<p>Install tiny-mce</p>

<pre><code>sodu easy_install django-tinymce
</code></pre>

<h5>How to use</h5>

<p>add app in settings.py</p>

<pre><code>INSTALLED_APPS = (
…
'tinymce'
…
)
</code></pre>

<p>if you want replace textarea tag as html editor in admin page, modify your modeladmin like this</p>

<pre><code>from tinymce.widgets import TinyMCE
    formfield_overrides = {
        models.TextField:{'widget':TinyMCE(attrs={'cols':80,'rows':20},)},
    }

    class Media:
        js = (
            '/d-media/js/tiny_mce/tiny_mce.js',
            '/d-media/js/tiny_mce/textareas.js',
        )
    class Meta:
        model = Article
    …
</code></pre>

<p>copy the textareas.js to your static media directory.</p>

<p>more adavnce settings in <a href="http://www.tinymce.com/wiki.php">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django in sae]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/18/django-in-sae/"/>
    <updated>2012-10-18T13:30:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/18/django-in-sae</id>
    <content type="html"><![CDATA[<h3>tools need installed first by order:</h3>

<ul>
<li>python 2.6 or python 2.7</li>
<li>django 1.2.7 or above</li>
<li>mysql</li>
<li>phpmyadmin</li>
<li>apache2</li>
<li>install-tools</li>
<li>svn</li>
<li>git</li>
<li>sae python-sdk tools</li>
</ul>


<p>start a django project:</p>

<pre><code>django-admin.py startproject project
</code></pre>

<p>start a app:</p>

<pre><code>django-admin.py startapp app
</code></pre>

<p>modify settings.py file the database config struct</p>

<pre><code>from os import environ
import sae.const

sae_environ = environ.get('APP_NAME','')

MYSQL_DB = 'your_database_name' 
MYSQL_USER = 'your_username' 
MYSQL_PASS = 'your_password' 
MYSQL_HOST_M = 'your_mysql_host' 
MYSQL_HOST_S = 'your_mysql_host' 
MYSQL_PORT = 'your_mysql_port' 

if sae_environ:
    MYSQL_DB = sae.const.MYSQL_DB 
    MYSQL_USER = sae.const.MYSQL_USER 
    MYSQL_PASS = sae.const.MYSQL_PASS 
    MYSQL_HOST_M = sae.const.MYSQL_HOST 
    MYSQL_HOST_S = sae.const.MYSQL_HOST_S 
    MYSQL_PORT = sae.const.MYSQL_PORT

DATABASES = { 
    'default': { 
    'ENGINE': 'django.db.backends.mysql', 
    'NAME': MYSQL_DB, 
    'USER': MYSQL_USER, 
    'PASSWORD': MYSQL_PASS, 
    'HOST': MYSQL_HOST_M, 
    'PORT': MYSQL_PORT, 
    } 
}
</code></pre>

<p>don&#8217;t foget to add app to INSTALLED_APPS:</p>

<pre><code>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
    'project.app',
)
</code></pre>

<p>go to app and add models in models.py</p>

<pre><code>from django.db import models
from project.settings import sae_environ
class Data(models.Models):
    file_name = models.CharField(max_length=100)
    file_data = models.FileField(upload_to='file')
    if sae_environ:
        from project.ready4sae.store import SaeStorage
        file_data = models.FileField(storage=SaeStorage(domain='your_domain',app='your_app'))
</code></pre>

<p>then you can use python manage.py syncdb to generate the datebase and the tables</p>

<p>use phpmyadmin to check the database your generated and export it to sql file</p>

<p>now,you can do your views coding.</p>

<p>run the server in local to test by using</p>

<pre><code>dev_server.py --mysql=username:password:mysql_host:mysql_port --storage-path=/your/path/to/storage/your_domain/your_app
</code></pre>

<p>your must make directory first if you will use the storage sevice for your project</p>

<p>if it runs okey,your can now deploy your project to the sae cloud.</p>

<p>change your index.wsgi file to:</p>

<pre><code>import sae
import os
import sys
import django.core.handlers.wsgi

os.environ['DJANGO_SETTINGS_MODULE'] = 'project.settings'

application = sae.create_wsgi_app(django.core.handlers.wsgi.WSGIHandler())
</code></pre>

<p>log in to your sae account and go to your app,something must do:</p>

<ul>
<li>init your mysql and import from your sql file</li>
<li>init your storage</li>
</ul>


<p>over.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django create inmemoryfile]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/18/django-create-inmemoryfile/"/>
    <updated>2012-10-18T12:51:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/18/django-create-inmemoryfile</id>
    <content type="html"><![CDATA[<p>say we have a model like that:</p>

<pre><code>class Data(models.Model):
    file_name = models.CharField(max_length=100)
    upload_file = models.FileField(upload_to='data')
</code></pre>

<p>we what create a file in back,but not save to filesystem.
so use StringIO create string first</p>

<pre><code>from cStringIO import StringIO

my_str = 'qwer\nasdf\m\n'

buff = StringIO(my_str)

buff.seek(0,2)
</code></pre>

<p>use InMemoryUploadFile to create the string file</p>

<pre><code>from django.core.files.uploadedfile import InMemoryUploadedFile
from app.models import Data
file_name = 'myfile.txt'
file_data = InMemoryUploadedFile(buf,'file',file_name,None,buff.tell(),None)

d = Data(file_name = file_name)
d.upload_file.save(file_name,file_data)
d.save() 
</code></pre>

<p>untile now we create an InMemoryUploadedFile object and save it to our model.</p>

<p>by the way we can use simpler way to create the file</p>

<pre><code>from django.core.files.base import ContentFile

file_data = ContentFile(buff.getvalue())
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse tips]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/16/eclipse-tips/"/>
    <updated>2012-10-16T09:28:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/16/eclipse-tips</id>
    <content type="html"><![CDATA[<p>1.fix unicode garbled</p>

<p>right click project->properties->Resource->Text file encoding->other->UTF-8</p>

<p>2.auto complete</p>

<p>Windows->Preferences->Java->Editor->Content Asist->replace auto activation triggers for Java &#8220;.&#8221; to &#8220;.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django use filefield in SAE]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/18/django-use-filefield-in-sae/"/>
    <updated>2012-08-18T16:17:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/18/django-use-filefield-in-sae</id>
    <content type="html"><![CDATA[<p>sina 有个云平台叫sina app enginee，当然，是山寨google app enginee的。虽然这个东西还在alpha阶段，但是对于我等叼丝程序员来说，免去了购买vps麻烦，免费的总归是好的，即使有点问题，也总比没有的强吧。</p>

<p>最近研究了好几天的sae的storage。总觉得很不爽，因为官方api给的很笼统，看不明白，网上demo不多，几乎都同一个人转载，当然也有牛人，不过没找到牛人的源码，所以只好自己推敲了。</p>

<p>再这里要感谢下falcon同学，自己写了一个ready4sae的storage方法，在我纠结了好久以后，用了一下，发现竟然能够用，真是大喜啊.</p>

<p>下面就先来说说如何使用吧：</p>

<p>1.先建立一个store.py的文件：</p>

<pre><code>#! coding:utf-8
</code></pre>

<p>import itertools
import sae.storage
from datetime import datetime
from os.path import basename,splitext
from sae.const import APP_NAME
from django.conf import settings
from django.core.files.storage import Storage
from django.utils.http import urlquote</p>

<p>class SaeStorage(Storage):</p>

<pre><code>"""
SAE storage
"""

def __init__(self, domain=None, app=None):
    if app is None:
        app = APP_NAME
    if domain is None:
        domain = settings.SAE_STORAGE_DOMAIN
    self.domain = domain
    self.base_url = "http://%s-%s.stor.sinaapp.com/" % (app,self.domain)
    self.client = sae.storage.Client()

def _open(self, name, mode='rb'):
    """
    not allow in sae, or maybe get the object content and store in memery using StringIO is a good idea. 
    """
    raise sae.storage.PermissionDeniedError('not allow to do this')

def _save(self, name, content):
    name = self.get_available_name(name)
    data = ''.join(content.chunks())
    ob = sae.storage.Object(data)        
    return self.client.put(self.domain, name, ob)

def delete(self, name):
    return self.delete(self.domain, name)

def exists(self, name):
    return name in [ob['name'] for ob in self.client.list(self.domain)]

def listdir(self, path):        
    return [ob['name'] for ob in self.client.list(self.domain)]

def path(self, name):        
    return self.url

def size(self, name):
    ob = self.clien.stat(self.domain,name)
    return ob['length']

def url(self, name):        
    url = self.client.url(self.domain,name)
    return url.replace(urlquote(self.base_url),'')

def accessed_time(self, name):
    return self.created_time()    

def created_time(self, name):
    ob = self.clien.stat(self.domain,name)
    return datetime.fromtimestamp(ob['datetime'])

def modified_time(self, name):
    return self.created_time()    

def get_available_name(self, name):
    count = itertools.count(1)
    while name in (ob['name'] for ob in self.client.list(self.domain)):
        file_root,file_ext = splitext(basename(name))
        name = '%s_%s%s' % (file_root,count.next(),file_ext)
    return name
</code></pre>

<p>2.然后在settings.py 里面写好sae mysql 的设置代码，这些网上请自己搜索。</p>

<p>3.建立自己的models.py</p>

<pre><code>from django.db import models
from store import SaeStorage
class Persion(models.Model):
    name = models.CharField(max_length=30)
    photo=models.FileField(
storage=SaeStorage(domain='your_storage_domain',app='your_app_name'))
#    photo = models.FileField(upload_to='xxx')
</code></pre>

<p>这里注意下的说，在本地syncdb的时候，要使用默认的storage，不然会报错，但是用dev_server.py的时候是没关系的。</p>

<p>4.就这么简单，本地测试通过的话记得上传到svn，记得把mysql的tables导入到sae先。</p>

<p>5.ps.在此感谢
http://blog.csdn.net/vesslan1029/article/details/7594545
和falcon同学提供的思路。
以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[os x lion mysql python]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/16/os-x-lion-mysql-python/"/>
    <updated>2012-08-16T22:11:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/16/os-x-lion-mysql-python</id>
    <content type="html"><![CDATA[<p>1.after install mysql on mac.pls be sure the version of mysql.</p>

<pre><code>file /usr/local/mysql/bin/mysql
</code></pre>

<p>it may be show</p>

<pre><code>/usr/local/mysql/bin/mysql: Mach-O 64-bit executable x86_64
</code></pre>

<p>2.download mysql-python package.</p>

<pre><code>wget http://download.sourceforge.net/sourceforge/mysql-python/MySQL-python-1.2.3.tar.gz

tar zxvf MySQL-python-1.2.3.tar.gz
cd MySQL-python1.2.3
</code></pre>

<p>3.change the site.cfg in line 13</p>

<pre><code>#mysql_config = /usr/local/bin/mysql_config
</code></pre>

<p>to:</p>

<pre><code>mysql_config = /usr/local/mysql/bin/mysql_config
</code></pre>

<p>4.build and install from source.</p>

<pre><code>sudo ARCHFLAGS='-arch x86_64' python setup.py build
sudo ARCHFLAGS='-arch x86_64' python setup.py install
</code></pre>

<p>if mysql is a version of i386,use the command:</p>

<pre><code>sudo ARCHFLAGS='-arch i386' python setup.py build
sudo ARCHFLAGS='-arch i386' python setup.py install
</code></pre>

<p>5.go to python shell</p>

<pre><code>import MySQLdb
</code></pre>

<p>if raise error:</p>

<pre><code>ImportError: dlopen(/Users/cgy8888/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.7-x86_64.egg-tmp/_mysql.so, 2): Library not loaded: libmysqlclient.18.dylib
Referenced from: /Users/cgy8888/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.7-x86_64.egg-tmp/_mysql.so
Reason: image not found
</code></pre>

<p>fixed it by doing the following:</p>

<pre><code>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
</code></pre>

<p>now go to django project and run:</p>

<pre><code>python manage.py syncdb
</code></pre>

<p>it will work now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql on mac]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/14/mysql-on-mac/"/>
    <updated>2012-08-14T20:56:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/14/mysql-on-mac</id>
    <content type="html"><![CDATA[<p>1.download mysql from mysql website.it&#8217;s a dmg file,
open the dmg file 4 files in it.install the pkg file and the prefPane file</p>

<p>2.to use mysql command in the terminal,modify the /etc/bashrc file</p>

<pre><code>#mysql
alias mysql='/usr/local/mysql/bin/mysql'
alias mysqladmin='/usr/local/mysql/bin/mysqladmin'
</code></pre>

<p>add in the end of bashrc file.</p>

<p>3.reopen the terminal,try use mysql command.</p>

<p>4.use mysqladmin to set root user</p>

<pre><code>mysqladmin -u root password mysqlpassword 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress to github on mac]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/12/title/"/>
    <updated>2012-08-12T17:09:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/12/title</id>
    <content type="html"><![CDATA[<p>1.install xcode</p>

<p>2.install homebrew</p>

<pre><code>$ ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
$ brew update
</code></pre>

<p>3.install git</p>

<pre><code>$ brew install git
</code></pre>

<p>4.install RVM</p>

<pre><code>$ bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>5.install ruby</p>

<pre><code>$ rvm install 1.9.3
</code></pre>

<p>6.install Pow</p>

<pre><code>curl get.pow.cx | sh
</code></pre>

<p>7.download octopress</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<p>8.install some tools</p>

<pre><code>$ gem install bundler
$ rbenv rehash
$ bundle install
$ rake install
</code></pre>

<p>9.test localhost view</p>

<pre><code>rake preview
</code></pre>

<p>10.go to github website,and new a repository with the name &#8220;yourusername.github.com&#8221;</p>

<p>11.set octopress data</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>12.generate html files</p>

<pre><code>$ rake generate
</code></pre>

<p>13.deploy it</p>

<pre><code>$ rake deploy
</code></pre>

<p>then wait several minutes for github update the site.</p>

<p>14.post an article</p>

<pre><code>rake new_post['article_title']
</code></pre>

<p>in octopress/source/_post/ will make a markdown file</p>
]]></content>
  </entry>
  
</feed>
