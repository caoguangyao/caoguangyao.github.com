<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yes,It's mE.]]></title>
  <link href="http://caoguangyao.github.com/atom.xml" rel="self"/>
  <link href="http://caoguangyao.github.com/"/>
  <updated>2012-10-16T12:11:36+08:00</updated>
  <id>http://caoguangyao.github.com/</id>
  <author>
    <name><![CDATA[Cao.Guangyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eclipse tips]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/16/eclipse-tips/"/>
    <updated>2012-10-16T09:28:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/16/eclipse-tips</id>
    <content type="html"><![CDATA[<p>1.fix uncode garbled</p>

<p>right click project->properties->Resource->Text file encoding->other->UTF-8</p>

<p>2.auto complete</p>

<p>Windows->Preferences->Java->Editor->Content Asist->replace auto activation triggers for Java &#8220;.&#8221; to &#8220;.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django use filefield in SAE]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/18/django-use-filefield-in-sae/"/>
    <updated>2012-08-18T16:17:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/18/django-use-filefield-in-sae</id>
    <content type="html"><![CDATA[<p>sina 有个云平台叫sina app enginee，当然，是山寨google app enginee的。虽然这个东西还在alpha阶段，但是对于我等叼丝程序员来说，免去了购买vps麻烦，免费的总归是好的，即使有点问题，也总比没有的强吧。</p>

<p>最近研究了好几天的sae的storage。总觉得很不爽，因为官方api给的很笼统，看不明白，网上demo不多，几乎都同一个人转载，当然也有牛人，不过没找到牛人的源码，所以只好自己推敲了。</p>

<p>再这里要感谢下falcon同学，自己写了一个ready4sae的storage方法，在我纠结了好久以后，用了一下，发现竟然能够用，真是大喜啊.</p>

<p>下面就先来说说如何使用吧：</p>

<p>1.先建立一个store.py的文件：</p>

<pre><code>#! coding:utf-8
</code></pre>

<p>import itertools
import sae.storage
from datetime import datetime
from os.path import basename,splitext
from sae.const import APP_NAME
from django.conf import settings
from django.core.files.storage import Storage
from django.utils.http import urlquote</p>

<p>class SaeStorage(Storage):</p>

<pre><code>"""
SAE storage
"""

def __init__(self, domain=None, app=None):
    if app is None:
        app = APP_NAME
    if domain is None:
        domain = settings.SAE_STORAGE_DOMAIN
    self.domain = domain
    self.base_url = "http://%s-%s.stor.sinaapp.com/" % (app,self.domain)
    self.client = sae.storage.Client()

def _open(self, name, mode='rb'):
    """
    not allow in sae, or maybe get the object content and store in memery using StringIO is a good idea. 
    """
    raise sae.storage.PermissionDeniedError('not allow to do this')

def _save(self, name, content):
    name = self.get_available_name(name)
    data = ''.join(content.chunks())
    ob = sae.storage.Object(data)        
    return self.client.put(self.domain, name, ob)

def delete(self, name):
    return self.delete(self.domain, name)

def exists(self, name):
    return name in [ob['name'] for ob in self.client.list(self.domain)]

def listdir(self, path):        
    return [ob['name'] for ob in self.client.list(self.domain)]

def path(self, name):        
    return self.url

def size(self, name):
    ob = self.clien.stat(self.domain,name)
    return ob['length']

def url(self, name):        
    url = self.client.url(self.domain,name)
    return url.replace(urlquote(self.base_url),'')

def accessed_time(self, name):
    return self.created_time()    

def created_time(self, name):
    ob = self.clien.stat(self.domain,name)
    return datetime.fromtimestamp(ob['datetime'])

def modified_time(self, name):
    return self.created_time()    

def get_available_name(self, name):
    count = itertools.count(1)
    while name in (ob['name'] for ob in self.client.list(self.domain)):
        file_root,file_ext = splitext(basename(name))
        name = '%s_%s%s' % (file_root,count.next(),file_ext)
    return name
</code></pre>

<p>2.然后在settings.py 里面写好sae mysql 的设置代码，这些网上请自己搜索。</p>

<p>3.建立自己的models.py</p>

<pre><code>from django.db import models
from store import SaeStorage
class Persion(models.Model):
    name = models.CharField(max_length=30)
    photo=models.FileField(
storage=SaeStorage(domain='your_storage_domain',app='your_app_name'))
#    photo = models.FileField(upload_to='xxx')
</code></pre>

<p>这里注意下的说，在本地syncdb的时候，要使用默认的storage，不然会报错，但是用dev_server.py的时候是没关系的。</p>

<p>4.就这么简单，本地测试通过的话记得上传到svn，记得把mysql的tables导入到sae先。</p>

<p>5.ps.在此感谢
http://blog.csdn.net/vesslan1029/article/details/7594545
和falcon同学提供的思路。
以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[os x lion mysql python]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/16/os-x-lion-mysql-python/"/>
    <updated>2012-08-16T22:11:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/16/os-x-lion-mysql-python</id>
    <content type="html"><![CDATA[<p>1.after install mysql on mac.pls be sure the version of mysql.</p>

<pre><code>file /usr/local/mysql/bin/mysql
</code></pre>

<p>it may be show</p>

<pre><code>/usr/local/mysql/bin/mysql: Mach-O 64-bit executable x86_64
</code></pre>

<p>2.download mysql-python package.</p>

<pre><code>wget http://download.sourceforge.net/sourceforge/mysql-python/MySQL-python-1.2.3.tar.gz

tar zxvf MySQL-python-1.2.3.tar.gz
cd MySQL-python1.2.3
</code></pre>

<p>3.change the site.cfg in line 13</p>

<pre><code>#mysql_config = /usr/local/bin/mysql_config
</code></pre>

<p>to:</p>

<pre><code>mysql_config = /usr/local/mysql/bin/mysql_config
</code></pre>

<p>4.build and install from source.</p>

<pre><code>sudo ARCHFLAGS='-arch x86_64' python setup.py build
sudo ARCHFLAGS='-arch x86_64' python setup.py install
</code></pre>

<p>if mysql is a version of i386,use the command:</p>

<pre><code>sudo ARCHFLAGS='-arch i386' python setup.py build
sudo ARCHFLAGS='-arch i386' python setup.py install
</code></pre>

<p>5.go to python shell</p>

<pre><code>import MySQLdb
</code></pre>

<p>if raise error:</p>

<pre><code>ImportError: dlopen(/Users/cgy8888/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.7-x86_64.egg-tmp/_mysql.so, 2): Library not loaded: libmysqlclient.18.dylib
Referenced from: /Users/cgy8888/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.7-x86_64.egg-tmp/_mysql.so
Reason: image not found
</code></pre>

<p>fixed it by doing the following:</p>

<pre><code>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
</code></pre>

<p>now go to django project and run:</p>

<pre><code>python manage.py syncdb
</code></pre>

<p>it will work now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql on mac]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/14/mysql-on-mac/"/>
    <updated>2012-08-14T20:56:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/14/mysql-on-mac</id>
    <content type="html"><![CDATA[<p>1.download mysql from mysql website.it&#8217;s a dmg file,
open the dmg file 4 files in it.install the pkg file and the prefPane file</p>

<p>2.to use mysql command in the terminal,modify the /etc/bashrc file</p>

<pre><code>#mysql
alias mysql='/usr/local/mysql/bin/mysql'
alias mysqladmin='/usr/local/mysql/bin/mysqladmin'
</code></pre>

<p>add in the end of bashrc file.</p>

<p>3.reopen the terminal,try use mysql command.</p>

<p>4.use mysqladmin to set root user</p>

<pre><code>mysqladmin -u root password mysqlpassword 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress to github on mac]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/12/title/"/>
    <updated>2012-08-12T17:09:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/12/title</id>
    <content type="html"><![CDATA[<p>1.install xcode</p>

<p>2.install homebrew</p>

<pre><code>ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
$ brew update
</code></pre>

<p>3.install git</p>

<pre><code>$ brew install git
</code></pre>

<p>4.install RVM</p>

<pre><code>$ bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>5.install ruby</p>

<pre><code>$ rvm install 1.9.3
</code></pre>

<p>6.install Pow</p>

<pre><code>curl get.pow.cx | sh
</code></pre>

<p>7.download octopress</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<p>8.install some tools</p>

<pre><code>$ gem install bundler
$ rbenv rehash
$ bundle install
$ rake install
</code></pre>

<p>9.test localhost view</p>

<pre><code>rake preview
</code></pre>

<p>10.go to github website,and new a repository with the name &#8220;yourusername.github.com&#8221;</p>

<p>11.set octopress data</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>12.generate html files</p>

<pre><code>$ rake generate
</code></pre>

<p>13.deploy it</p>

<pre><code>$ rake deploy
</code></pre>

<p>then wait several minutes for github update the site.</p>

<p>14.post an article</p>

<pre><code>rake new_post['article_title']
</code></pre>

<p>in octopress/source/_post/ will make a markdown file</p>
]]></content>
  </entry>
  
</feed>
