<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yes,It's mE.]]></title>
  <link href="http://caoguangyao.github.com/atom.xml" rel="self"/>
  <link href="http://caoguangyao.github.com/"/>
  <updated>2013-05-23T14:53:11+08:00</updated>
  <id>http://caoguangyao.github.com/</id>
  <author>
    <name><![CDATA[Cao.Guangyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java slim3 on Google App Engine]]></title>
    <link href="http://caoguangyao.github.com/blog/2013/05/23/java-slim3-on-google-app-engine/"/>
    <updated>2013-05-23T12:31:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2013/05/23/java-slim3-on-google-app-engine</id>
    <content type="html"><![CDATA[<hr />

<h3><strong>Envirements</strong></h3>

<p>install Java</p>

<p>install eclipse</p>

<p>install Google Plugin for Eclipse in</p>

<p><code> http://dl.google.com/eclipse/plugin/x.x </code></p>

<p>note : &#8220;x.x&#8221; due to  your eclipse version.</p>

<p>install slim3 for Eclipse in</p>

<p><code> http://slim3.googlecode.com/svn/updates/ </code></p>

<hr />

<h3><strong>Configuration</strong></h3>

<p>set Eclipse for testing</p>

<p>Preference > Java > Code Style > Organize Imports set &#8220;1&#8221; to &#8220;Number of static imports needed for.&#8221;</p>

<p>Preference > Java > Editor > Content Assist > Favorites add</p>

<p><code>org.hamcrest.CoreMatchers</code></p>

<p><code>org.junit.Assert</code></p>

<p><code>org.junit.matchers.JUnitMatchers</code></p>

<p>Preference > General > Workspace:</p>

<p>check &#8220;Refresh automatically&#8221; (eclipse 3.7 above does not have this option)</p>

<hr />

<h3><strong> Create new simple project </strong></h3>

<p>in eclipse New > project > Slim3 > Silm3 Project > next > give a project name and root package name (should be same)</p>

<p>open build.xml in your project</p>

<p>right click menu Run as > Ant Build (first item)</p>

<p>will popup a dialog,then input &#8220;/twitter/&#8221; (&#8220;twitter/&#8221; is short for &#8220;/twitter/index&#8221;) click &#8220;ok&#8221; button.</p>

<p>&#8220;twitter&#8221; is the controller name,
so it will automatically create controller class:</p>

<p>projectname.controller.twitter.IndexController</p>

<p>projectname.controller.twitter.IndexControllerTest</p>

<p>war/twitter/index.jsp</p>

<p>Now,you can run testcase for IndexControllerTest by right menu > Run as > JUnit Test.
It will show a green progressbar for no problem.</p>

<p>You can run the project by right menu > Run as > Web Application.</p>

<p>Open browser with &#8220;http://localhost:8888/twitter/&#8221;,and see what happend</p>

<hr />

<h3><strong>Add model</strong></h3>

<p>Right menu build.xml > Run as > Ant Build (second item ) > gen-model</p>

<p>will popup a dialog to input a model name. let&#8217;s name it &#8220;Tweet&#8221;.</p>

<p>then will automatic add a class Tweet.java</p>

<p><strong>Add field to model</strong>
In Tweet.java add 2 fields</p>

<pre><code>private String content;
private Date createDate = new Date();
</code></pre>

<p>and add the getter and setter for class.</p>

<p><strong>Add service for model</strong></p>

<p>Right click build.xml > Run as > Ant Build(second item) > gen-model > in shown popup dialog, give a name with &#8220;TweetService&#8221;,then will create an empty service class file named TweetService.java.</p>

<p>Now,change this class:</p>

<pre><code>…

import projectname.model.Tweet;

public class TweeterService{
    public Tweet tweet(Map(String,Object) input){
        Tweet tweet = new Tweet();
        BeanUtil.copy(input,tweet);
        Transaction tx = Datastore.beginTransaction();
        Datastore.put(tweet);
        tx.commit()
        return tweet;
    }
}
</code></pre>

<p>note:</p>

<p>BeanUtil copies property values from the input data to the model for all cases where the property names are the same. Even if the property type of the input is different from the one of the model, the value is converted appropriately.
To put a model to the datastore, you use Datastore.put(Object model).
See Creating a model.
If an exception occurred during the transaction, it is rolled back by Slim3 automatically.</p>

<p><strong>Create getList method</strong></p>

<p>add code to the class:</p>

<pre><code>…
public class TwitterService {

    private TweetMeta t = new TweetMeta();

    …
    public List&lt;Tweet&gt; getTweetList() {
        return Datastore.query(t).sort(t.createdDate.desc).asList();
    }
} 
</code></pre>

<hr />

<h3><strong>Using model in controller</strong></h3>

<p>Go to IndexController.java,change some code to</p>

<pre><code>…
import projectname.model.Tweet;
import projectname.service.TwitterService;

public class IndexController extends Controller {

    private TwitterService service = new TwitterService();

    @Override
    public Navigation run() throws Exception {
        List&lt;Tweet&gt; tweetList = service.getTweetList();
        requestScope("tweetList", tweetList);
        return forward("index.jsp");
    }
}
</code></pre>

<p>note:requestScope(&#8220;tweetList&#8221;, tweetList) is short for request.setAttribute(&#8220;tweetList&#8221;, tweetList)</p>

<hr />

<h3><strong>Render to template</strong></h3>

<p>To render to template,just change the index.jsp file</p>

<pre><code>&lt;%@page pageEncoding="UTF-8" isELIgnored="false"%&gt;
&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;
&lt;%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%&gt;
&lt;%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%&gt;
&lt;%@taglib prefix="f" uri="http://www.slim3.org/functions"%&gt;

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;title&gt;twitter Index&lt;/title&gt;
&lt;link rel="stylesheet" type="text/css" href="http://caoguangyao.github.com/css/global.css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;What are you doing?&lt;/p&gt;

&lt;c:forEach var="e" items="${tweetList}"&gt;
${f:h(e.content)}
&lt;hr /&gt;
&lt;/c:forEach&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>note:I list tweeted contents using the tweetList variable.
f:h is a JSP function to escape HTML.</p>

<p><em>Now if you have data in the tweetList,the page will show all the data.content in the list.</em></p>

<hr />

<h4>To be Continue&#8230;</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[foundations-templates-layouts]]></title>
    <link href="http://caoguangyao.github.com/blog/2013/04/22/foundations-templates-layouts/"/>
    <updated>2013-04-22T10:04:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2013/04/22/foundations-templates-layouts</id>
    <content type="html"><![CDATA[<ul>
<li>banded</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/561974/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373820059&amp;Signature=%2FDOhdI0VSSkee3izFwYgUzRR2ms%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Banded-Template" alt="alt image" /></p>

<p><a href="https://gist.github.com/ghaida/f72f24eebaa31784fd8d/raw/9e3d74f519ed4ff29f7f05a4f5f895d95bdee9b7/gistfile1.html" title="here">sample code</a>
<a href="https://www.notableapp.com/posts/f5c3a40dc27421a7ae447873c1bc4ca129aff9a1#" title="more info">more info</a>
<a href="http://foundation.zurb.com/page-templates4/banded.html">demo</a></p>

<ul>
<li>blog</li>
</ul>


<p> <img src="https://s3.amazonaws.com/prod.zurb/562137/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819341&amp;Signature=yds%2BHVwzFXqnqnnIICcdRSRI4nw%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Blog-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054379/raw/f080e139a4e25c4548b265e7229cd6dbe09bff92/gistfile1.html">sample code</a>
<a href="https://www.notableapp.com/posts/7b64bc1ee1177ae881368d74a5a2c39ef0e8871d#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/blog.html">demo</a></p>

<ul>
<li>feed</li>
</ul>


<p> <img src="https://s3.amazonaws.com/prod.zurb/562171/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819165&amp;Signature=Bgi40AdxRAsLRMxLvJ81tu1dxPY%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Feed-Template" alt="alt image" />
 <a href="https://gist.github.com/ghaida/5054441/raw/9bbb02b12f266e7b42f6c8f10422919ddb7d13c0/gistfile1.html">sample</a>
 <a href="https://www.notableapp.com/posts/935033a0deaf933a2332dd94ab294ed8bd691bfd#annotate">more info</a>
 <a href="http://foundation.zurb.com/page-templates4/feed.html">demo</a></p>

<ul>
<li>grid</li>
</ul>


<p> <img src="https://s3.amazonaws.com/prod.zurb/562284/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819651&amp;Signature=GrDb16e%2FRMdNHCHnYDVAsALl33M%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Grid-Template" alt="alt image" />
 <a href="https://gist.github.com/ghaida/5054484/raw/3ad9255042ccd614312447c017ee8b61ff304d2b/gistfile1.html">sample</a>
 <a href="https://www.notableapp.com/posts/187001b0d20e3a3219ad43e4ddd651df4b14ae6a#annotate">more info</a>
 <a href="http://foundation.zurb.com/page-templates4/grid.html">demo</a></p>

<ul>
<li>orbit home</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562298/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373820168&amp;Signature=uueLd3jhKSXYBrb58UYe7Iu0of4%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Orbit-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054559/raw/5b9cead6482c998fcfce533075f9ef01343a150a/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/c14f15af6748c351254814e5356108e6e7ceb4eb#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/orbithome.html">demo</a></p>

<ul>
<li>banner home</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562299/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819585&amp;Signature=GYKtLbI%2Bd8L3%2FSVxOm2V1lWTyF4%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Banner-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054598/raw/5eb480a9ba24869cabe0760a0745dfab33520233/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/6e5673e7cf7a7228c91dd0e2668f695f0218cd41#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/bannerhome.html">demo</a></p>

<ul>
<li>slidebar</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562300/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819882&amp;Signature=1GAhPwBGOWcX1btPNHhXcIsaKw4%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Sidebar-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054620/raw/4a233752e1a51d010cf8cfe8ec3d49af17d2d858/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/a9f4dfdb9f0a7cb38a954d22acbb8ce550d89381#">more info</a>
<a href="http://foundation.zurb.com/page-templates4/sidebar.html">demo</a></p>

<ul>
<li>contact</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562303/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819618&amp;Signature=KFdjbW84Lis%2BB77doLq7%2FVlj4dg%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Contact" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054646/raw/cd669ee59ce65510c52a5acc39c1f5dbb7b9c925/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/d703855426b0090fdd31baac7cae895c25586800#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/contact.html">demo</a></p>

<ul>
<li>marketing</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562305/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819770&amp;Signature=pcL%2FoCzFNY6cO4EKO%2Fneg0qS7Sc%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Marketing-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054687/raw/13b62f3d38a07a4f60043ba39bed40c10887b26d/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/6c64072a5fee3b39b1fe7cc06ef0a0d447dd5b4c#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/marketing.html">demo</a></p>

<ul>
<li>realty</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562313/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819214&amp;Signature=f4XtIKrzyPrngs48h2wLuH9k2rA%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Realty-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054706/raw/87be8e6da19c1f44437bd389a8c05ff0c3451a05/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/6e5673e7cf7a7228c91dd0e2668f695f0218cd41#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/realty.html">demo</a></p>

<ul>
<li>so boxy</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562324/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373820166&amp;Signature=Eeg5MqlnkOE2WW0c3JVJXpKbE%2Bo%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-So-Boxy-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054726/raw/680d79b9f7ffeecdb90de6ea1a0d554d8c678ef9/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/53788be80f4bec2608900db291d35f55022208e2#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/so-boxy.html">demo</a></p>

<ul>
<li>store</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562346/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819111&amp;Signature=Pb3%2FQ4j31eHBGpK6DgHKNX4fDM8%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Store-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054752/raw/0ff5fc07ca04167c450559e1db3a1b11de94b95c/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/4e13e639fbf4ac815dd106de6caa02e949b81bb0#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/store.html">demo</a></p>

<ul>
<li>workspace</li>
</ul>


<p><img src="https://s3.amazonaws.com/prod.zurb/562348/capture.jpeg?AWSAccessKeyId=1JFEM44HQGMDT753E9G2&amp;Expires=1373819149&amp;Signature=ot6SXVO3AWDGY51aSq2kucGCNfA%3D&amp;response-content-disposition=attachment%3B%20filename%3DFoundation-Workspace-Template" alt="alt image" />
<a href="https://gist.github.com/ghaida/5054765/raw/6e643cfdca63f2452605c07460c94488b2ccfe03/gistfile1.html">sample</a>
<a href="https://www.notableapp.com/posts/b67072af6a4da56b986d6de99319e5659bd7f68b#annotate">more info</a>
<a href="http://foundation.zurb.com/page-templates4/workspace.html">demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[donki-useful-codes]]></title>
    <link href="http://caoguangyao.github.com/blog/2013/04/22/donki-useful-codes/"/>
    <updated>2013-04-22T09:56:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2013/04/22/donki-useful-codes</id>
    <content type="html"><![CDATA[<h2>1. js &amp; jquery</h2>

<ul>
<li><p>reverse:</p>

<p>  jQuery.fn.reverse = [].reverse;</p></li>
<li><p>object exists:</p>

<pre><code>  jQuery.fn.exists = function(){
      return this.length&gt;0;
  }
</code></pre></li>
<li><p>string format:</p>

<pre><code>  if (!String.prototype.format) {
      String.prototype.format = function() {
          var args = arguments;
          return this.replace(/{(\d+)}/g, function(match, number) { 
              return typeof args[number] != 'undefined'? args[number]: match;
          });
      };
  }
</code></pre></li>
</ul>


<p>plugins > <em>fileDownlad.js</em></p>

<p><a href="https://github.com/johnculviner/jquery.fileDownload">download</a></p>

<h2>2. django</h2>

<ul>
<li><p>settings.py</p>

<ul>
<li><p>current directory</p>

<pre><code>  import os
  APP_ROOT = os.path.dirname(__file__)
</code></pre></li>
</ul>
</li>
<li><p>models</p>

<ul>
<li><p>dynamic file upload path</p>

<pre><code>  class THistory(models.Model):
      shop = models.ForeignKey('MShop')
      section = models.ForeignKey('MSection')
      revision = models.IntegerField()

      def get_upload_to(self,filename):
          ext = filename.split('.')[-1]
          filename = u'%s.%s' % (get_datetime_string(),ext)
          return os.path.join(self.default_upload_to,filename)

      filepath = models.FileField(upload_to=get_upload_to)
      user = models.ForeignKey('MUser',null=True,on_delete=models.SET_NULL)
      upload_date = models.DateTimeField(auto_now=True,auto_now_add=True)

      default_upload_to = 'excelfile'
</code></pre></li>
</ul>
</li>
<li><p>custom django user (method 1):</p>

<pre><code>  class MUser(User):
      objects = UserManager()
      display_name = models.CharField(max_length = 24, default='')
      permission_choices = (
              ('1','admin'),
              ('2','normal'),
              )
      permission= models.CharField(max_length= 5,choices=permission_choices)
      shop = models.ForeignKey('MShop',blank=True,null=True)

      def __unicode__(self):
          return self.usernam
</code></pre></li>
</ul>


<h2>3. views</h2>

<ul>
<li><p>make download response</p>

<pre><code>  def generate_download_response(file_path,file_name):
      response = HttpResponse(readFile(file_path))
      response['Content-Length'] = os.path.getsize(file_path)
      response['Content-type'] = 'application/vnd.ms-excel'
      response['Content-Disposition'] = 'attachment; filename="%s"' % file_name.encode('cp932')
      response.set_cookie('fileDownload','true',path='/')

      return respons

  def readFile(fn, buf_size=262144):
      f = open(fn, "rb")
      while True:
          c = f.read(buf_size)
          if c:
              yield c
          else:
              break
      f.close()
</code></pre></li>
<li><p>custom 404,500 view</p>

<ul>
<li><p>A).config in settings.py ->debug = False</p></li>
<li><p>B).config in urls.py ->
handler404  = &#8216;webapp.views.handle_404_view&#8217;
handler500 = &#8216;webapp.views.handler_500_view</p></li>
<li><p>C).config in views.py -></p>

<pre><code>  def handle_500_view(request):
      t = loader.get_template('500.html')
      type,value,tb = sys.exc_info()
      return HttpResponseServerError(t.render(RequestContext(request,{'excption_value':value}))) 

  def handle_404_view(request):

      return render(request,'404.html',status=404
</code></pre></li>
</ul>
</li>
<li><p>formset</p>

<p>  <a href="https://docs.djangoproject.com/en/1.4/topics/forms/formsets/">see detail in django documents</a></p></li>
<li><p>transactions</p>

<p>  <a href="https://docs.djangoproject.com/en/1.4/topics/db/transactions/">see detail in django documents</a></p></li>
<li><p>commands</p>

<ul>
<li><p>start project</p>

<pre><code>  django-admin startproject projectname
</code></pre></li>
<li><p>start application</p>

<pre><code>  django-admin startapp appname
</code></pre></li>
<li><p>syncdb</p>

<pre><code>  python manage.py syncdb
</code></pre></li>
<li><p>inspectdb</p>

<pre><code>  python manage.py inspectdb &gt; filename.py
</code></pre></li>
<li><p>run standalone</p>

<pre><code>  python manage.py runserver 0.0.0.0:portnumber
</code></pre></li>
<li><p>run shell</p>

<pre><code>  python manage.py shell
</code></pre></li>
<li><p>multipy database</p>

<pre><code>  python manage.py syncdb --database=databasename
</code></pre></li>
</ul>
</li>
<li><p>static file serve</p>

<ul>
<li><p>config in settings.py</p>

<pre><code>  MEDIA_ROOT = os.path.join(APP_ROOT,'..\\donki-static') 
  MEDIA_URL = '/excel/
</code></pre></li>
<li><p>config in urls.py</p>

<pre><code>  url(r'^excel/(?P&lt;path&gt;.*)$', django.views.static.serve', {'document_root':MEDIA_ROOT})
</code></pre></li>
</ul>
</li>
<li><p>apache host</p>

<ul>
<li><p>wsgi</p>

<p>  <a href="https://code.google.com/p/modwsgi/">sell detail dowcuments</a></p></li>
<li><p>sample virtualhost:</p>

<pre><code>  &lt;VirtualHost *:80&gt;
  ServerName donki.localhost

  WSGIScriptAlias / c:\sourcecode\donki\donki\wsgi.py

  &lt;Directory c:\sourcecode\donki\donki&gt;
  &lt;Files wsgi.py&gt;
  Order deny,allow
  Allow from all
  &lt;/Files&gt;
  &lt;/Directory&gt;

  Alias /static/ "c:/sourcecode/donki/webapp/static/"

  &lt;Directory "c:/sourcecode/donki/webapp/static/"&gt;
  Order deny,allow
  Allow from all
  &lt;/Directory&gt;
  ErrorLog "c:\sourcecode\donki\logs\error.log"

  CustomLog "c:\sourcecode\donki\logs\access.log" common
  &lt;/VirtualHost&gt;
</code></pre></li>
<li><p>command:</p>

<pre><code>  httpd -t check #script syntax
  httpd -k restart #restart appache with information            
</code></pre></li>
</ul>
</li>
</ul>


<h2>3. python</h2>

<pre><code>* libs
    * MySQL-python
    * cx_Oracle
    * pywin32

* 3.x &amp;2.x
</code></pre>

<h2>4. office vba</h2>

<ul>
<li><p>convert column to number</p>

<pre><code>  def conver_column_to_number(col_name):
      return reduce(lambda s,a:s*26+ord(a)-ord('A')+1,col_name,0)
</code></pre></li>
<li><p>quick deal with cells</p>

<pre><code> range = sheet.Range('start : end')
 details see in win32.py
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django connect to mssql]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/11/16/django-connect-to-mssql/"/>
    <updated>2012-11-16T12:53:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/11/16/django-connect-to-mssql</id>
    <content type="html"><![CDATA[<p>platform:</p>

<pre><code>Client:
ubuntu10.10
django1.2.7
django-pyodbc from trunk

Database Server
ms sql server 2005
winxp 32bit
</code></pre>

<p>install tools:</p>

<pre><code>sudo apt-get install unixodbc unixodbc-dev freetds-dev tdsodbc
</code></pre>

<p>then modify the config files</p>

<pre><code>sudo vim /etc/odbcinst.ini

[FreeTDS]
Description=TDS driver
Driver=/usr/lib/odbc/libtdsodbc.so
Setup=/usr/lib/odbc/libtdsS.so
CPTimeout=
CPReuse=
</code></pre>

<p>odbc.ini:</p>

<pre><code>sudo vim /etc/odbc.ini  

[mydsn]
Description= my dns
Driver=FreeTDS
Database=mydb
Servername=myServer
TDS_Version=8.0
Port=1433
</code></pre>

<p>freetds.conf:
append to the last.</p>

<pre><code>sudo vim /etc/freetds/freetds.conf

[myServer]
host = 192.168.3.128
port = 1433
tds version = 8.0
</code></pre>

<p>config finished</p>

<p>use tsql command to test connect:</p>

<pre><code>tsql -S server_ip_address -U username -P password
</code></pre>

<p>install pyodbc</p>

<pre><code>sudo easy_install pyodbc
</code></pre>

<p>if have error for gcc:</p>

<pre><code>sudo apt-get install python-dev build-essential
</code></pre>

<p>and try it angain.</p>

<p>write a python script to test:</p>

<pre><code>import pyodbc

conn = pyodbc.connect("DSN=mydsn;UID=username;PWD=password")

cur = conn.cursor()
cur.execute('select * from test_table')
for row in cur:
    print 8 ,row
</code></pre>

<p>if have error in conn,use following code test first.</p>

<pre><code>conn = pyodbc.connect("DRIVER={FreeTDS};Server=server_ip_address;UID=username;PWD=password;DATABASE=dbname")
</code></pre>

<p>if it don&#8217;t run nomarlly ,please check your config file:freetds.conf,odbc.ini,odbcinst.ini</p>

<p>then install django-odbc from trunk</p>

<pre><code>svn co http://django-pyodbc.googlecode.com/svn/trunk/
</code></pre>

<p>change the settings.py file like the document said.</p>

<p>then your can run syncdb and runserver.</p>

<h4>troubles</h4>

<p>I did use django1.1 and django-pyodbc1.0.x at first,pyodbc is work right,but can&#8217;t run the django syncdb and runserver.
it throws some error about settings.Time_Zone,and I still don&#8217;t know how to deal with it.</p>

<p>it seens have some problem use django-pyodbc from trunk too.it happens when syncdb for admin site:throws a None type can&#8217;t itera.</p>

<p>all settings are done,you can write a model to test it .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim tips]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/11/08/vim-tips/"/>
    <updated>2012-11-08T10:26:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/11/08/vim-tips</id>
    <content type="html"><![CDATA[<h3>ctags</h3>

<p>download from <a href="http://ctags.sourceforge.net">here</a> .
intall it:</p>

<pre><code>$ tar -xzvf ctags-5.6.tar.gz
$ cd ctags-5.6
$ make
$ sudo make install   
</code></pre>

<p>use it:
go to directory</p>

<pre><code>$ ctags -R
</code></pre>

<p>ctrl+] go to function definition.
ctrl+t go back.</p>

<h3>taglist</h3>

<p>download from <a href="http://www.vim.org/scripts/script.php?script_id=273">here</a>.</p>

<p>add these in .vimrc</p>

<pre><code>let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
</code></pre>

<p>use command with :Tlist in vim.</p>

<h3>winmanager</h3>

<p>download from <a href="http://www.vim.org/scripts/script.php?script_id=95">here</a>.</p>

<p>add these in .vimrc</p>

<pre><code>let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle&lt;cr&gt;
</code></pre>

<p>restart vim and type &#8216;wm&#8217; in normal state</p>

<h3>grep</h3>

<p>download form <a href="http://www.vim.org/scripts/script.php?script_id=311">here</a>.</p>

<p>add in .vimrc</p>

<pre><code>nnoremap &lt;silent&gt; &lt;F3&gt; :Grep&lt;CR&gt;
</code></pre>

<p>then you can use F3 to search your word.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to remote ssh server without password]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/19/how-to-remote-ssh-server-without-password/"/>
    <updated>2012-10-19T08:31:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/19/how-to-remote-ssh-server-without-password</id>
    <content type="html"><![CDATA[<p>1.create ras key by using ssh-keygen</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>this operation will generate two keys in your system.</p>

<p>2.copy it to your ssh server</p>

<pre><code>cat ~/.ssh/id_rsa.pub |ssh username@ssh_server_host 'cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>3.now you can remote to your server without password.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django tinymce]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/18/django-tinymce/"/>
    <updated>2012-10-18T15:56:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/18/django-tinymce</id>
    <content type="html"><![CDATA[<p>Install tiny-mce</p>

<pre><code>sodu easy_install django-tinymce
</code></pre>

<h5>How to use</h5>

<p>add app in settings.py</p>

<pre><code>INSTALLED_APPS = (
…
'tinymce'
…
)
</code></pre>

<p>if you want replace textarea tag as html editor in admin page, modify your modeladmin like this</p>

<pre><code>from tinymce.widgets import TinyMCE
    formfield_overrides = {
        models.TextField:{'widget':TinyMCE(attrs={'cols':80,'rows':20},)},
    }

    class Media:
        js = (
            '/d-media/js/tiny_mce/tiny_mce.js',
            '/d-media/js/tiny_mce/textareas.js',
        )
    class Meta:
        model = Article
    …
</code></pre>

<p>copy the textareas.js to your static media directory.</p>

<p>more adavnce settings in <a href="http://www.tinymce.com/wiki.php">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django in sae]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/18/django-in-sae/"/>
    <updated>2012-10-18T13:30:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/18/django-in-sae</id>
    <content type="html"><![CDATA[<h3>tools need installed first by order:</h3>

<ul>
<li>python 2.6 or python 2.7</li>
<li>django 1.2.7 or above</li>
<li>mysql</li>
<li>phpmyadmin</li>
<li>apache2</li>
<li>install-tools</li>
<li>svn</li>
<li>git</li>
<li>sae python-sdk tools</li>
</ul>


<p>start a django project:</p>

<pre><code>django-admin.py startproject project
</code></pre>

<p>start a app:</p>

<pre><code>django-admin.py startapp app
</code></pre>

<p>modify settings.py file the database config struct</p>

<pre><code>from os import environ
import sae.const

sae_environ = environ.get('APP_NAME','')

MYSQL_DB = 'your_database_name' 
MYSQL_USER = 'your_username' 
MYSQL_PASS = 'your_password' 
MYSQL_HOST_M = 'your_mysql_host' 
MYSQL_HOST_S = 'your_mysql_host' 
MYSQL_PORT = 'your_mysql_port' 

if sae_environ:
    MYSQL_DB = sae.const.MYSQL_DB 
    MYSQL_USER = sae.const.MYSQL_USER 
    MYSQL_PASS = sae.const.MYSQL_PASS 
    MYSQL_HOST_M = sae.const.MYSQL_HOST 
    MYSQL_HOST_S = sae.const.MYSQL_HOST_S 
    MYSQL_PORT = sae.const.MYSQL_PORT

DATABASES = { 
    'default': { 
    'ENGINE': 'django.db.backends.mysql', 
    'NAME': MYSQL_DB, 
    'USER': MYSQL_USER, 
    'PASSWORD': MYSQL_PASS, 
    'HOST': MYSQL_HOST_M, 
    'PORT': MYSQL_PORT, 
    } 
}
</code></pre>

<p>don&#8217;t foget to add app to INSTALLED_APPS:</p>

<pre><code>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.admin',
    'project.app',
)
</code></pre>

<p>go to app and add models in models.py</p>

<pre><code>from django.db import models
from project.settings import sae_environ
class Data(models.Models):
    file_name = models.CharField(max_length=100)
    file_data = models.FileField(upload_to='file')
    if sae_environ:
        from project.ready4sae.store import SaeStorage
        file_data = models.FileField(storage=SaeStorage(domain='your_domain',app='your_app'))
</code></pre>

<p>then you can use python manage.py syncdb to generate the datebase and the tables</p>

<p>use phpmyadmin to check the database your generated and export it to sql file</p>

<p>now,you can do your views coding.</p>

<p>run the server in local to test by using</p>

<pre><code>dev_server.py --mysql=username:password:mysql_host:mysql_port --storage-path=/your/path/to/storage/your_domain/your_app
</code></pre>

<p>your must make directory first if you will use the storage sevice for your project</p>

<p>if it runs okey,your can now deploy your project to the sae cloud.</p>

<p>change your index.wsgi file to:</p>

<pre><code>import sae
import os
import sys
import django.core.handlers.wsgi

os.environ['DJANGO_SETTINGS_MODULE'] = 'project.settings'

application = sae.create_wsgi_app(django.core.handlers.wsgi.WSGIHandler())
</code></pre>

<p>log in to your sae account and go to your app,something must do:</p>

<ul>
<li>init your mysql and import from your sql file</li>
<li>init your storage</li>
</ul>


<p>over.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django create inmemoryfile]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/18/django-create-inmemoryfile/"/>
    <updated>2012-10-18T12:51:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/18/django-create-inmemoryfile</id>
    <content type="html"><![CDATA[<p>say we have a model like that:</p>

<pre><code>class Data(models.Model):
    file_name = models.CharField(max_length=100)
    upload_file = models.FileField(upload_to='data')
</code></pre>

<p>we what create a file in back,but not save to filesystem.
so use StringIO create string first</p>

<pre><code>from cStringIO import StringIO

my_str = 'qwer\nasdf\m\n'

buff = StringIO(my_str)

buff.seek(0,2)
</code></pre>

<p>use InMemoryUploadFile to create the string file</p>

<pre><code>from django.core.files.uploadedfile import InMemoryUploadedFile
from app.models import Data
file_name = 'myfile.txt'
file_data = InMemoryUploadedFile(buf,'file',file_name,None,buff.tell(),None)

d = Data(file_name = file_name)
d.upload_file.save(file_name,file_data)
d.save() 
</code></pre>

<p>untile now we create an InMemoryUploadedFile object and save it to our model.</p>

<p>by the way we can use simpler way to create the file</p>

<pre><code>from django.core.files.base import ContentFile

file_data = ContentFile(buff.getvalue())
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse tips]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/10/16/eclipse-tips/"/>
    <updated>2012-10-16T09:28:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/10/16/eclipse-tips</id>
    <content type="html"><![CDATA[<p>1.fix unicode garbled</p>

<p>right click project->properties->Resource->Text file encoding->other->UTF-8</p>

<p>2.auto complete</p>

<p>Windows->Preferences->Java->Editor->Content Asist->replace auto activation triggers for Java &#8220;.&#8221; to &#8220;.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django use filefield in SAE]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/18/django-use-filefield-in-sae/"/>
    <updated>2012-08-18T16:17:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/18/django-use-filefield-in-sae</id>
    <content type="html"><![CDATA[<p>sina 有个云平台叫sina app enginee，当然，是山寨google app enginee的。虽然这个东西还在alpha阶段，但是对于我等叼丝程序员来说，免去了购买vps麻烦，免费的总归是好的，即使有点问题，也总比没有的强吧。</p>

<p>最近研究了好几天的sae的storage。总觉得很不爽，因为官方api给的很笼统，看不明白，网上demo不多，几乎都同一个人转载，当然也有牛人，不过没找到牛人的源码，所以只好自己推敲了。</p>

<p>再这里要感谢下falcon同学，自己写了一个ready4sae的storage方法，在我纠结了好久以后，用了一下，发现竟然能够用，真是大喜啊.</p>

<p>下面就先来说说如何使用吧：</p>

<p>1.先建立一个store.py的文件：</p>

<pre><code>#! coding:utf-8
</code></pre>

<p>import itertools
import sae.storage
from datetime import datetime
from os.path import basename,splitext
from sae.const import APP_NAME
from django.conf import settings
from django.core.files.storage import Storage
from django.utils.http import urlquote</p>

<p>class SaeStorage(Storage):</p>

<pre><code>"""
SAE storage
"""

def __init__(self, domain=None, app=None):
    if app is None:
        app = APP_NAME
    if domain is None:
        domain = settings.SAE_STORAGE_DOMAIN
    self.domain = domain
    self.base_url = "http://%s-%s.stor.sinaapp.com/" % (app,self.domain)
    self.client = sae.storage.Client()

def _open(self, name, mode='rb'):
    """
    not allow in sae, or maybe get the object content and store in memery using StringIO is a good idea. 
    """
    raise sae.storage.PermissionDeniedError('not allow to do this')

def _save(self, name, content):
    name = self.get_available_name(name)
    data = ''.join(content.chunks())
    ob = sae.storage.Object(data)        
    return self.client.put(self.domain, name, ob)

def delete(self, name):
    return self.delete(self.domain, name)

def exists(self, name):
    return name in [ob['name'] for ob in self.client.list(self.domain)]

def listdir(self, path):        
    return [ob['name'] for ob in self.client.list(self.domain)]

def path(self, name):        
    return self.url

def size(self, name):
    ob = self.clien.stat(self.domain,name)
    return ob['length']

def url(self, name):        
    url = self.client.url(self.domain,name)
    return url.replace(urlquote(self.base_url),'')

def accessed_time(self, name):
    return self.created_time()    

def created_time(self, name):
    ob = self.clien.stat(self.domain,name)
    return datetime.fromtimestamp(ob['datetime'])

def modified_time(self, name):
    return self.created_time()    

def get_available_name(self, name):
    count = itertools.count(1)
    while name in (ob['name'] for ob in self.client.list(self.domain)):
        file_root,file_ext = splitext(basename(name))
        name = '%s_%s%s' % (file_root,count.next(),file_ext)
    return name
</code></pre>

<p>2.然后在settings.py 里面写好sae mysql 的设置代码，这些网上请自己搜索。</p>

<p>3.建立自己的models.py</p>

<pre><code>from django.db import models
from store import SaeStorage
class Persion(models.Model):
    name = models.CharField(max_length=30)
    photo=models.FileField(
storage=SaeStorage(domain='your_storage_domain',app='your_app_name'))
#    photo = models.FileField(upload_to='xxx')
</code></pre>

<p>这里注意下的说，在本地syncdb的时候，要使用默认的storage，不然会报错，但是用dev_server.py的时候是没关系的。</p>

<p>4.就这么简单，本地测试通过的话记得上传到svn，记得把mysql的tables导入到sae先。</p>

<p>5.ps.在此感谢
http://blog.csdn.net/vesslan1029/article/details/7594545
和falcon同学提供的思路。
以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[os x lion mysql python]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/16/os-x-lion-mysql-python/"/>
    <updated>2012-08-16T22:11:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/16/os-x-lion-mysql-python</id>
    <content type="html"><![CDATA[<p>1.after install mysql on mac.pls be sure the version of mysql.</p>

<pre><code>file /usr/local/mysql/bin/mysql
</code></pre>

<p>it may be show</p>

<pre><code>/usr/local/mysql/bin/mysql: Mach-O 64-bit executable x86_64
</code></pre>

<p>2.download mysql-python package.</p>

<pre><code>wget http://download.sourceforge.net/sourceforge/mysql-python/MySQL-python-1.2.3.tar.gz

tar zxvf MySQL-python-1.2.3.tar.gz
cd MySQL-python1.2.3
</code></pre>

<p>3.change the site.cfg in line 13</p>

<pre><code>#mysql_config = /usr/local/bin/mysql_config
</code></pre>

<p>to:</p>

<pre><code>mysql_config = /usr/local/mysql/bin/mysql_config
</code></pre>

<p>4.build and install from source.</p>

<pre><code>sudo ARCHFLAGS='-arch x86_64' python setup.py build
sudo ARCHFLAGS='-arch x86_64' python setup.py install
</code></pre>

<p>if mysql is a version of i386,use the command:</p>

<pre><code>sudo ARCHFLAGS='-arch i386' python setup.py build
sudo ARCHFLAGS='-arch i386' python setup.py install
</code></pre>

<p>5.go to python shell</p>

<pre><code>import MySQLdb
</code></pre>

<p>if raise error:</p>

<pre><code>ImportError: dlopen(/Users/cgy8888/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.7-x86_64.egg-tmp/_mysql.so, 2): Library not loaded: libmysqlclient.18.dylib
Referenced from: /Users/cgy8888/.python-eggs/MySQL_python-1.2.3-py2.6-macosx-10.7-x86_64.egg-tmp/_mysql.so
Reason: image not found
</code></pre>

<p>fixed it by doing the following:</p>

<pre><code>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
</code></pre>

<p>now go to django project and run:</p>

<pre><code>python manage.py syncdb
</code></pre>

<p>it will work now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql on mac]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/14/mysql-on-mac/"/>
    <updated>2012-08-14T20:56:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/14/mysql-on-mac</id>
    <content type="html"><![CDATA[<p>1.download mysql from mysql website.it&#8217;s a dmg file,
open the dmg file 4 files in it.install the pkg file and the prefPane file</p>

<p>2.to use mysql command in the terminal,modify the /etc/bashrc file</p>

<pre><code>#mysql
alias mysql='/usr/local/mysql/bin/mysql'
alias mysqladmin='/usr/local/mysql/bin/mysqladmin'
</code></pre>

<p>add in the end of bashrc file.</p>

<p>3.reopen the terminal,try use mysql command.</p>

<p>4.use mysqladmin to set root user</p>

<pre><code>mysqladmin -u root password mysqlpassword 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress to github on mac]]></title>
    <link href="http://caoguangyao.github.com/blog/2012/08/12/title/"/>
    <updated>2012-08-12T17:09:00+08:00</updated>
    <id>http://caoguangyao.github.com/blog/2012/08/12/title</id>
    <content type="html"><![CDATA[<p>1.install xcode</p>

<p>2.install homebrew</p>

<pre><code>$ ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
$ brew update
</code></pre>

<p>3.install git</p>

<pre><code>$ brew install git
</code></pre>

<p>4.install RVM</p>

<pre><code>$ bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>5.install ruby</p>

<pre><code>$ rvm install 1.9.3
</code></pre>

<p>6.install Pow</p>

<pre><code>curl get.pow.cx | sh
</code></pre>

<p>7.download octopress</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
</code></pre>

<p>8.install some tools</p>

<pre><code>$ gem install bundler
$ rbenv rehash
$ bundle install
$ rake install
</code></pre>

<p>9.test localhost view</p>

<pre><code>rake preview
</code></pre>

<p>10.go to github website,and new a repository with the name &#8220;yourusername.github.com&#8221;</p>

<p>11.set octopress data</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>12.generate html files</p>

<pre><code>$ rake generate
</code></pre>

<p>13.deploy it</p>

<pre><code>$ rake deploy
</code></pre>

<p>then wait several minutes for github update the site.</p>

<p>14.post an article</p>

<pre><code>rake new_post['article_title']
</code></pre>

<p>in octopress/source/_post/ will make a markdown file</p>
]]></content>
  </entry>
  
</feed>
